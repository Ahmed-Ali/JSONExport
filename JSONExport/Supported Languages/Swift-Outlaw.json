{
  "modelStart": "{\n",
  "importForEachCustomType": "",
  "reservedKeywords": [
    "abstract",
    "assert",
    "boolean",
    "break",
    "byte",
    "case",
    "catch",
    "char",
    "class",
    "const",
    "continue",
    "default",
    "do",
    "double",
    "else",
    "enum",
    "extends",
    "false",
    "final",
    "finally",
    "float",
    "for",
    "goto",
    "if",
    "implements",
    "import",
    "instanceof",
    "int",
    "interface",
    "long",
    "native",
    "new",
    "null",
    "package",
    "private",
    "protected",
    "public",
    "return",
    "short",
    "static",
    "strictfp",
    "super",
    "switch",
    "synchronized",
    "this",
    "throw",
    "throws",
    "transient",
    "true",
    "try",
    "void",
    "volatile",
    "while",
    "class",
    "description"
  ],
  "booleanGetter": "",
  "briefDescription": "Defines how your JSON objects can be mapped to Swift classes using the built-in NSJSONSerialization class",
  "utilityMethods": [
    {
      "forEachProperty": "\t\tif <!VarName!> != nil{\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = <!VarName!>\n\t\t}\n",
      "bodyEnd": "\t}\n",
      "signature": "\tfunc serialized() -> [String:Any]",
      "forEachCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = <!VarName!>!.serialized()\n\t\t}\n",
      "forEachArrayOfCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\tvar dictionaryElements = [[String:Any]]()\n\t\t\tfor <!VarName!>Element in <!VarName!>! {\n\t\t\t\tdictionaryElements.append(<!VarName!>Element.serialized())\n\t\t\t}\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = dictionaryElements\n\t\t}\n",
      "returnStatement": "\t\treturn dictionary\n",
      "body": "\t\tvar dictionary = [String:Any]()\n",
      "comment": "\t/**\n\t * Returns all the available property values in the form of [String:Any] object where the key is the approperiate json key and the value is the value of the corresponding property\n\t */\n",
      "bodyStart": "\n\t{\n"
    },
    {
      "forEachProperty": "         <!VarName!> = aDecoder.decodeObject(forKey: \"<!JsonKeyName!>\") as? <!VarType!>\n",
      "bodyEnd": "\n\t}\n",
      "signature": "    @objc required init(coder aDecoder: NSCoder)",
      "forEachCustomTypeProperty": "         <!VarName!> = aDecoder.decodeObject(forKey: \"<!JsonKeyName!>\") as? <!VarType!>\n",
      "forEachArrayOfCustomTypeProperty": "         <!VarName!> = aDecoder.decodeObject(forKey :\"<!JsonKeyName!>\") as? <!VarType!>\n",
      "returnStatement": "",
      "body": "",
      "comment": "\n    /**\n    * NSCoding required initializer.\n    * Fills the data from the passed decoder\n    */\n",
      "bodyStart": "\n\t{\n"
    },
    {
      "forEachProperty": "\t\tif <!VarName!> != nil{\n\t\t\taCoder.encode(<!VarName!>, forKey: \"<!JsonKeyName!>\")\n\t\t}\n",
      "bodyEnd": "\n\t}\n",
      "signature": "    @objc func encode(with aCoder: NSCoder)",
      "forEachCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\taCoder.encode(<!VarName!>, forKey: \"<!JsonKeyName!>\")\n\t\t}\n",
      "forEachArrayOfCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\taCoder.encode(<!VarName!>, forKey: \"<!JsonKeyName!>\")\n\t\t}\n",
      "returnStatement": "",
      "body": "",
      "comment": "\n    /**\n    * NSCoding required method.\n    * Encodes mode properties into the decoder\n    */\n",
      "bodyStart": "\n\t{\n"
    }
  ],
  "dataTypes": {
    "stringType": "String",
    "boolType": "Bool",
    "floatType": "Float",
    "doubleType": "Double",
    "characterType": "Character",
    "longType": "Double",
    "intType": "Int"
  },
  "wordsToRemoveToGetArrayElementsType": [
    "[",
    "]"
  ],
  "defaultParentWithUtilityMethods": "NSObject, DataObject",
  "constructors": [
    {
      "fetchBasicTypeWithSpecialNeedsPropertyFromMap": "",
      "fetchCustomTypePropertyFromMap": "\t\tif let <!VarName!>Data = object.optionalAny(for: \"<!JsonKeyName!>\") as? [String:Any]{\n\t\t\t<!VarName!> = try <!VarType!>(object: <!VarName!>Data)\n\t\t}\n",
      "bodyEnd": "\t}\n",
      "fetchBasicTypePropertyFromMap": "\t\t<!VarName!> = object.value(for: \"<!JsonKeyName!>\")\n",
      "signature": "\trequired init(object: Extractable) throws",
      "fetchArrayOfCustomTypePropertyFromMap": "\t\t<!VarName!> = <!VarType!>()\n\t\tif let <!VarName!>Array = object.optionalAny(for: \"<!JsonKeyName!>\") as? [[String:Any]]{\n\t\t\tfor dic in <!VarName!>Array{\n\t\t\t\tlet value = try <!ElementType!>(object: dic)\n\t\t\t\t<!VarName!>!.append(value)\n\t\t\t}\n\t\t}\n",
      "comment": "\t/**\n\t * Instantiate the instance using the passed dictionary values to set the properties values\n\t */\n",
      "bodyStart": "{\n"
    }
  ],
  "modelDefinition": "\nclass <!ModelName!>",
  "genericType": "AnyObject",
  "getter": "",
  "setter": "",
  "displayLangName": "Swift - Outlaw",
  "fileExtension": "swift",
  "basicTypesWithSpecialFetchingNeeds": [],
  "arrayType": "[<!ElementType!>]",
  "modelDefinitionWithParent": "\n\nclass <!ModelName!> : <!ParentClass!>",
  "instanceVarDefinition": "\tvar <!VarName!> : <!VarType!>?\n",
  "supportsFirstLineStatement": "false",
  "modelEnd": "\n}",
  "staticImports": "import Foundation\nimport Outlaw",
  "langName": "Swift"
}