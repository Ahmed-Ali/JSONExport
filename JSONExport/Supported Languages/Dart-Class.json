{
    "modelStart": "{\n",
    "basicTypesWithSpecialFetchingNeedsReplacements": [
                                                       "intValue",
                                                       "boolValue",
                                                       "charValue",
                                                       "floatValue",
                                                       "doubleValue",
                                                       "stringValue",
                                                       "stringValue"
                                                       ],
    "importForEachCustomType": "",
    "reservedKeywords": [
                         "abstract",
                         "assert",
                         "boolean",
                         "break",
                         "byte",
                         "case",
                         "catch",
                         "char",
                         "class",
                         "const",
                         "continue",
                         "default",
                         "do",
                         "double",
                         "else",
                         "enum",
                         "extends",
                         "false",
                         "final",
                         "finally",
                         "float",
                         "for",
                         "goto",
                         "if",
                         "implements",
                         "import",
                         "instanceof",
                         "int",
                         "interface",
                         "long",
                         "native",
                         "new",
                         "null",
                         "package",
                         "private",
                         "protected",
                         "public",
                         "return",
                         "short",
                         "static",
                         "strictfp",
                         "super",
                         "switch",
                         "synchronized",
                         "this",
                         "throw",
                         "throws",
                         "transient",
                         "true",
                         "try",
                         "void",
                         "volatile",
                         "while",
                         "class",
                         "description"
                         ],
    "booleanGetter": "",
    "briefDescription": "Defines how your JSON objects can be mapped to Dart classes using the Dart library",
    "utilityMethods": [
                        {
                          "comment": "\t/*\n\t * Instantiate the instance using the passed json values to set the properties values\n\t */\n",
                          "signature": "\t<!ModelName!>.fromJson(Map json)",
                          "bodyStart": "{\n",
                          "body": "",
                          "returnStatement": "\t\t\n",
                          "bodyEnd": "\t}\n",
                            
                          "forEachProperty": "\t\t<!VarName!> = json[\"<!JsonKeyName!>\"];\n",
                          "forEachPropertyWithSpecialStoringNeeds": "",
                          
                          "forEachArrayOfCustomTypeProperty": "\t\t<!VarName!> = <!VarType!>()\n\t\tfinal <!VarName!>Array = json[\"<!JsonKeyName!>\"].arrayValue;\n\t\tfor(var <!VarName!>Json in <!VarName!>Array){\n\t\t\tfinal value = <!ElementType!>.fromJson(<!VarName!>Json);\n\t\t\t<!VarName!>.add(value);\n\t\t}\n",
                          
                          "forEachCustomTypeProperty": "\t\tfinal <!VarName!>Json = json[\"<!JsonKeyName!>\"];\n\t\tif (!<!VarName!>Json.isEmpty){\n\t\t\t<!VarName!> = <!VarType!>.fromJson(<!VarName!>Json);\n\t\t}\n"
                        },
                       {
                         "comment": "\t/*\n\t * convert the instance properties values to json\n\t */\n",
                         "signature": "\tMap<String, dynamic> toJson()",
                         "bodyStart": "{\n",
                         "body": "\t\tvar json = Map<String, dynamic>();\n",
                         "returnStatement": "\t\treturn json;\n",
                         "bodyEnd": "\t}\n",
                           
                         "forEachProperty": "\t\tjson[\"<!JsonKeyName!>\"] = this.<!VarName!>;\n",
                         "forEachPropertyWithSpecialStoringNeeds": "",
                         "forEachArrayOfCustomTypeProperty": "\t\tif (this.<!JsonKeyName!> != null) {\n\t\t\tjson[\"<!VarName!>\"] = this.<!VarName!>.map((v) => v.toJson()).toList();\n\t\t}\n",
                         "forEachCustomTypeProperty": "\t\tif(this.<!VarName!> != nil){\n\t\t\tjson[\"<!JsonKeyName!>\"] = this.<!VarName!>.toJson();\n\t\t}\n"
                       },
                       ],
    "dataTypes": {
        "stringType": "String",
        "boolType": "bool",
        "floatType": "double",
        "doubleType": "double",
        "characterType": "Character",
        "longType": "double",
        "intType": "int"
    },
    "wordsToRemoveToGetArrayElementsType": [
                                            ],
    "defaultParentWithUtilityMethods": "Object",
    "constructors": [
                    {
                    "comment": "\t///\timplement an initializer.\n",
                    "signature": "\t<!ModelName!>",
                    "bodyStart": "({\n",
                    "bodyEnd": "\n\t})\n",
                    "fetchArrayOfCustomTypePropertyFromMap": "\t\tthis.<!VarName!>,\n",
                    "fetchBasicTypePropertyFromMap": "\t\tthis.<!VarName!>,\n",
                    "fetchBasicTypeWithSpecialNeedsPropertyFromMap": "\t\tthis.<!VarName!>,\n",
                    "fetchCustomTypePropertyFromMap": "\t\tthis.<!VarName!>,\n"
                     }
                     ],
    "modelDefinition": "\nclass <!ModelName!>",
    "genericType": "dynamic",
    "getter": "",
    "setter": "",
    "displayLangName": "Dart - Class",
    "fileExtension": "dart",
    "basicTypesWithSpecialFetchingNeeds": [
                                           "Int",
                                           "Bool",
                                           "Character",
                                           "Float",
                                           "Double",
                                           "String",
                                           "AnyObject"
                                           ],
    "arrayType": "List<<!ElementType!>>",
    "modelDefinitionWithParent": "\n\nclass <!ModelName!>",
    "instanceVarDefinition": "\t<!VarType!>? <!VarName!><!VarTypeDefaultValue!>;\n",
    "supportsFirstLineStatement": "false",
    "modelEnd": "\n}",
    "staticImports": "",
    "langName": "Dart"
}
