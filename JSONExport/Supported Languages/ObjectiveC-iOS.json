{
    "arrayType": "NSArray",
    "basicTypesWithSpecialFetchingNeeds": [
        "NSInteger",
        "BOOL",
        "char",
        "CGFloat",
        "double",
        "long"
    ],
    "basicTypesWithSpecialFetchingNeedsReplacements": [
        "integerValue",
        "boolValue",
        "charValue",
        "floatValue",
        "doubleValue",
        "longValue"
    ],
    "basicTypesWithSpecialStoringNeeds": [
        "NSInteger",
        "BOOL",
        "char",
        "CGFloat",
        "double",
        "long"
    ],
    "briefDescription": "Defines how your JSON objects can be mapped to Objective-c classes using the built-in NSJSONSerialization class",
    "constVarDefinition": "NSString *const <!ConstKeyName!> = @\"<!JsonKeyName!>\";\n",
    "constructors": [
        {
            "bodyEnd": "\n\treturn self;\n}\n",
            "bodyStart": "{\n\tself = [super init];",
            "comment": "\n/**\n * Instantiate the instance using the passed dictionary values to set the properties values\n */\n",
            "fetchArrayOfCustomTypePropertyFromMap": "\n\tif(dictionary[<!ConstKeyName!>] != nil && [dictionary[<!ConstKeyName!>] isKindOfClass:[NSArray class]]){\n\t\tNSArray * <!VarName!>Dictionaries = dictionary[<!ConstKeyName!>];\n\t\tNSMutableArray * <!VarName!>Items = [NSMutableArray array];\n\t\tfor(NSDictionary * <!VarName!>Dictionary in <!VarName!>Dictionaries){\n\t\t\t<!ElementType!> * <!VarName!>Item = [[<!ElementType!> alloc] initWithDictionary:<!VarName!>Dictionary];\n\t\t\t[<!VarName!>Items addObject:<!VarName!>Item];\n\t\t}\n\t\tself.<!VarName!> = <!VarName!>Items;\n\t}",
            "fetchBasicTypePropertyFromMap": "\n\tif(![dictionary[<!ConstKeyName!>] isKindOfClass:[NSNull class]]){\n\t\tself.<!VarName!> = dictionary[<!ConstKeyName!>];\n\t}\n",
            "fetchBasicTypeWithSpecialNeedsPropertyFromMap": "\n\tif(![dictionary[<!ConstKeyName!>] isKindOfClass:[NSNull class]]){\n\t\tself.<!VarName!> = [dictionary[<!ConstKeyName!>] <!VarBasicTypeReplacement!>];\n\t}\n",
            "fetchCustomTypePropertyFromMap": "\n\tif(![dictionary[<!ConstKeyName!>] isKindOfClass:[NSNull class]]){\n\t\tself.<!VarName!> = [[<!VarType!> alloc] initWithDictionary:dictionary[<!ConstKeyName!>]];\n\t}\n",
            "signature": "\n-(instancetype)initWithDictionary:(NSDictionary *)dictionary\n"
        }
    ],
    "dataTypes": {
        "boolType": "BOOL",
        "characterType": "char",
        "doubleType": "double",
        "floatType": "CGFloat",
        "intType": "NSInteger",
        "longType": "long",
        "stringType": "NSString"
    },
    "displayLangName": "ObjectiveC - iOS",
    "fileExtension": "m",
    "genericType": "NSObject",
    "hasHeaderFile": true,
    "headerFileData": {
        "constructorSignatures": [
            "-(instancetype)initWithDictionary:(NSDictionary *)dictionary;\n"
        ],
        "headerFileExtension": "h",
        "importForEachCustomType": "#import \"<!ModelName!>.h\"\n",
        "importParentHeaderFile": "#import \"<!ParentClass!>.h\"\n",
        "instanceVarDefinition": "@property (nonatomic, strong) <!VarType!> * <!VarName!>;\n",
        "instanceVarWithSpeicalDefinition": "@property (nonatomic, assign) <!VarType!> <!VarName!>;\n",
        "modelDefinition": "\n@interface <!ModelName!> : NSObject\n",
        "modelDefinitionWithParent": "\n@interface <!ModelName!> : <!ParentClass!>\n",
        "modelEnd": "@end",
        "modelStart": "",
        "staticImports": "#import <UIKit/UIKit.h>",
        "typesNeedSpecialDefinition": [
            "NSInteger",
            "BOOL",
            "char",
            "CGFloat",
            "double",
            "long"
        ],
        "utilityMethodSignatures": [
            "-(NSDictionary *)toDictionary;\n"
        ]
    },
    "importForEachCustomType": "",
    "importHeaderFile": "#import \"<!ModelName!>.h\"\n",
    "instanceVarDefinition": "",
    "langName": "ObjectiveC - iOS",
    "modelDefinition": "\n@interface <!ModelName!> ()\n@end\n@implementation <!ModelName!>\n",
    "modelEnd": "@end",
    "modelStart": "",
    "reservedKeywords": [
        "abstract",
        "assert",
        "boolean",
        "break",
        "byte",
        "case",
        "catch",
        "char",
        "class",
        "const",
        "continue",
        "default",
        "do",
        "double",
        "else",
        "enum",
        "extends",
        "false",
        "final",
        "finally",
        "float",
        "for",
        "goto",
        "if",
        "implements",
        "import",
        "instanceof",
        "int",
        "interface",
        "long",
        "native",
        "new",
        "null",
        "package",
        "private",
        "protected",
        "public",
        "return",
        "short",
        "static",
        "strictfp",
        "super",
        "switch",
        "synchronized",
        "this",
        "throw",
        "throws",
        "transient",
        "true",
        "try",
        "void",
        "volatile",
        "while",
        "id",
        "class",
        "description"
    ],
    "staticImports": "",
    "supportsFirstLineStatement": "false",
    "utilityMethods": [
        {
            "body": "\tNSMutableDictionary * dictionary = [NSMutableDictionary dictionary];\n",
            "bodyEnd": "\n}\n",
            "bodyStart": "\n{\n",
            "comment": "\n/**\n * Returns all the available property values in the form of NSDictionary object where the key is the approperiate json key and the value is the value of the corresponding property\n */\n",
            "forEachArrayOfCustomTypeProperty": "\tif(self.<!VarName!> != nil){\n\t\tNSMutableArray * dictionaryElements = [NSMutableArray array];\n\t\tfor(<!ElementType!> * <!VarName!>Element in self.<!VarName!>){\n\t\t\t[dictionaryElements addObject:[<!VarName!>Element toDictionary]];\n\t\t}\n\t\tdictionary[<!ConstKeyName!>] = dictionaryElements;\n\t}\n",
            "forEachCustomTypeProperty": "\tif(self.<!VarName!> != nil){\n\t\tdictionary[<!ConstKeyName!>] = [self.<!VarName!> toDictionary];\n\t}\n",
            "forEachProperty": "\tif(self.<!VarName!> != nil){\n\t\tdictionary[<!ConstKeyName!>] = self.<!VarName!>;\n\t}\n",
            "forEachPropertyWithSpecialStoringNeeds": "\tdictionary[<!ConstKeyName!>] = @(self.<!VarName!>);\n",
            "returnStatement": "\treturn dictionary;\n",
            "signature": "-(NSDictionary *)toDictionary"
        },
        {
            "body": "",
            "bodyEnd": "\n}\n",
            "bodyStart": "\n{\n",
            "comment": "\n/**\n * Implementation of NSCoding encoding method\n */\n/**\n * Returns all the available property values in the form of NSDictionary object where the key is the approperiate json key and the value is the value of the corresponding property\n */\n",
            "forEachArrayOfCustomTypeProperty": "\tif(self.<!VarName!> != nil){\n\t\t[aCoder encodeObject:self.<!VarName!> forKey:<!ConstKeyName!>];\n\t}\n",
            "forEachCustomTypeProperty": "\tif(self.<!VarName!> != nil){\n\t\t[aCoder encodeObject:self.<!VarName!> forKey:<!ConstKeyName!>];\n\t}\n",
            "forEachProperty": "\tif(self.<!VarName!> != nil){\n\t\t[aCoder encodeObject:self.<!VarName!> forKey:<!ConstKeyName!>];\n\t}\n",
            "forEachPropertyWithSpecialStoringNeeds": "\t[aCoder encodeObject:@(self.<!VarName!>) forKey:<!ConstKeyName!>];",
            "returnStatement": "",
            "signature": "- (void)encodeWithCoder:(NSCoder *)aCoder"
        },
        {
            "body": "\tself = [super init];\n",
            "bodyEnd": "\n}\n",
            "bodyStart": "\n{\n",
            "comment": "\n/**\n * Implementation of NSCoding initWithCoder: method\n */\n",
            "forEachArrayOfCustomTypeProperty": "\tself.<!VarName!> = [aDecoder decodeObjectForKey:<!ConstKeyName!>];\n",
            "forEachCustomTypeProperty": "\tself.<!VarName!> = [aDecoder decodeObjectForKey:<!ConstKeyName!>];\n",
            "forEachProperty": "\tself.<!VarName!> = [aDecoder decodeObjectForKey:<!ConstKeyName!>];\n",
            "forEachPropertyWithSpecialStoringNeeds": "\tself.<!VarName!> = [[aDecoder decodeObjectForKey:<!ConstKeyName!>] <!VarBasicTypeReplacement!>];\n",
            "returnStatement": "\treturn self;\n",
            "signature": "- (instancetype)initWithCoder:(NSCoder *)aDecoder"
        },
        {
            "body": "\t<!ModelName!> *copy = [<!ModelName!> new];\n\n",
            "bodyEnd": "\n}\n",
            "bodyStart": "\n{\n",
            "comment": "\n/**\n * Implementation of NSCopying copyWithZone: method\n */\n",
            "forEachArrayOfCustomTypeProperty": "\tcopy.<!VarName!> = [self.<!VarName!> copy];\n",
            "forEachCustomTypeProperty": "\tcopy.<!VarName!> = [self.<!VarName!> copy];\n",
            "forEachProperty": "\tcopy.<!VarName!> = [self.<!VarName!> copy];\n",
            "forEachPropertyWithSpecialStoringNeeds": "\tcopy.<!VarName!> = self.<!VarName!>;\n",
            "returnStatement": "\n\treturn copy;",
            "signature": "- (instancetype)copyWithZone:(NSZone *)zone"
        }
    ],
    "wordsToRemoveToGetArrayElementsType": [
        "NSArray",
        "NSMutableArray"
    ]
}


