{
    "modelStart": "{\n",
    "importForEachCustomType": "",
    "reservedKeywords": [
                         "abstract",
                         "assert",
                         "boolean",
                         "break",
                         "byte",
                         "case",
                         "catch",
                         "char",
                         "class",
                         "const",
                         "continue",
                         "default",
                         "do",
                         "double",
                         "else",
                         "enum",
                         "extends",
                         "false",
                         "final",
                         "finally",
                         "float",
                         "for",
                         "goto",
                         "if",
                         "implements",
                         "import",
                         "instanceof",
                         "int",
                         "interface",
                         "long",
                         "native",
                         "new",
                         "null",
                         "package",
                         "private",
                         "protected",
                         "public",
                         "return",
                         "short",
                         "static",
                         "strictfp",
                         "super",
                         "switch",
                         "synchronized",
                         "this",
                         "throw",
                         "throws",
                         "transient",
                         "true",
                         "try",
                         "void",
                         "volatile",
                         "while",
                         "class",
                         "description"
                         ],
    "booleanGetter": "",
    "briefDescription": "Defines how your JSON objects can be mapped to Swift structures using the built-in NSJSONSerialization class",
    "utilityMethods": [
                       ],
    "dataTypes": {
        "stringType": "String",
        "boolType": "Bool",
        "floatType": "Float",
        "doubleType": "Double",
        "characterType": "Character",
        "longType": "Double",
        "intType": "Int"
    },
    "wordsToRemoveToGetArrayElementsType": [
                                            "[",
                                            "]"
                                            ],
    "constructors": [
                     {
                     "fetchBasicTypeWithSpecialNeedsPropertyFromMap": "",
                     "bodyStart": "{\n",
                     "body": "",
                     "bodyEnd": "\t}\n",
                     "fetchBasicTypePropertyFromMap": "\t\tcase <!VarName!> = \"<!JsonKeyName!>\"\n",
                     "signature": "\tenum CodingKeys: String, CodingKey ",
                     "fetchArrayOfCustomTypePropertyFromMap": "\t\tcase <!VarName!> = \"<!JsonKeyName!>\"\n",
                     "comment": "",
                     "fetchCustomTypePropertyFromMap": "\t\tcase <!VarName!>\n"
                     },
                     {
                     "fetchBasicTypeWithSpecialNeedsPropertyFromMap": "",
                     "bodyStart": "{\n\t\tguard let values = try? decoder.container(keyedBy: CodingKeys.self) else {\n\t\t\tprint(\"Could not decode coding key container for <!ModelName!>\")\n\t\t\treturn\n\t\t}\n",
                     "bodyEnd": "\t}\n",
                     "fetchBasicTypePropertyFromMap": "\t\tdo { <!VarName!> = try values.decodeIfPresent(<!VarType!>.self, forKey: .<!VarName!>) } catch {\n\t\t\tprint(\"error in parsing <!VarType!>.<!VarName!> ---- \",error.localizedDescription)\n\t\t}\n",
                     "signature": "\tinit(from decoder: Decoder)",
                     "fetchArrayOfCustomTypePropertyFromMap": "\t\tdo { <!VarName!> = try values.decodeIfPresent(<!VarType!>.self, forKey: .<!VarName!>) } catch {\n\t\t\tprint(\"error in parsing <!VarType!>.<!VarName!> ---- \",error.localizedDescription)\n\t\t}\n",
                     "comment": "",
                     "fetchCustomTypePropertyFromMap": "\t\tdo { <!VarName!> = try values.decodeIfPresent(<!VarType!>.self, forKey: .<!VarName!>)} catch {\n\t\t\t<!VarName!> = <!VarType!>(from: DictionaryDecoder())\n\t\t\tprint(\"error in parsing <!VarType!>.<!VarName!> ---- \",error.localizedDescription)\n\t\t}\n"
                     }
                     ],
    "modelDefinition": "\nstruct <!ModelName!> : Codable ",
    "genericType": "String",
    "getter": "",
    "setter": "",
    "fileExtension": "swift",
    "arrayType": "[<!ElementType!>]",
    "basicTypesWithSpecialFetchingNeeds": [
    ],
    "displayLangName": "Swift - Struct - Codable",
    "instanceVarDefinition": "\tvar <!VarName!> : <!VarType!>?\n",
    "supportsFirstLineStatement": "false",
    "modelEnd": "\n}",
    "staticImports": "import Foundation",
    "langName": "Swift"
}
