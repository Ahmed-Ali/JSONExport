{
    "modelStart": "{\n",
    "basicTypesWithSpecialFetchingNeedsReplacements": [
                                                       "intValue",
                                                       "boolValue",
                                                       "charValue",
                                                       "floatValue",
                                                       "doubleValue",
                                                       "stringValue",
                                                       "stringValue"
                                                       ],
    "importForEachCustomType": "",
    "reservedKeywords": [
                         "abstract",
                         "assert",
                         "boolean",
                         "break",
                         "byte",
                         "case",
                         "catch",
                         "char",
                         "class",
                         "const",
                         "continue",
                         "default",
                         "do",
                         "double",
                         "else",
                         "enum",
                         "extends",
                         "false",
                         "final",
                         "finally",
                         "float",
                         "for",
                         "goto",
                         "if",
                         "implements",
                         "import",
                         "instanceof",
                         "int",
                         "interface",
                         "long",
                         "native",
                         "new",
                         "null",
                         "package",
                         "private",
                         "protected",
                         "public",
                         "return",
                         "short",
                         "static",
                         "strictfp",
                         "super",
                         "switch",
                         "synchronized",
                         "this",
                         "throw",
                         "throws",
                         "transient",
                         "true",
                         "try",
                         "void",
                         "volatile",
                         "while",
                         "class",
                         "description"
                         ],
    "booleanGetter": "",
    "briefDescription": "Defines how your JSON objects can be mapped to Swift classes using the SwiftyJSON library",
    "utilityMethods": [
                       {
                       "forEachProperty": "\t\tif <!VarName!> != nil{\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = <!VarName!>\n\t\t}\n",
                       "bodyEnd": "\t}\n",
                       "signature": "\tfunc toDictionary() -> [String:Any]",
                       "forEachCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = <!VarName!>.toDictionary()\n\t\t}\n",
                       "forEachArrayOfCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\tvar dictionaryElements = [[String:Any]]()\n\t\t\tfor <!VarName!>Element in <!VarName!> {\n\t\t\t\tdictionaryElements.append(<!VarName!>Element.toDictionary())\n\t\t\t}\n\t\t\tdictionary[\"<!JsonKeyName!>\"] = dictionaryElements\n\t\t}\n",
                       "returnStatement": "\t\treturn dictionary\n",
                       "body": "\t\tvar dictionary = [String:Any]()\n",
                       "comment": "\t/**\n\t * Returns all the available property values in the form of [String:Any] object where the key is the approperiate json key and the value is the value of the corresponding property\n\t */\n",
                       "bodyStart": "\n\t{\n"
                       },
                       {
                       "forEachProperty": "         <!VarName!> = aDecoder.decodeObject(forKey: \"<!JsonKeyName!>\") as? <!VarType!>\n",
                       "bodyEnd": "\n\t}\n",
                       "signature": "    @objc required init(coder aDecoder: NSCoder)",
                       "forEachCustomTypeProperty": "         <!VarName!> = aDecoder.decodeObject(forKey: \"<!JsonKeyName!>\") as? <!VarType!>\n",
                       "forEachArrayOfCustomTypeProperty": "         <!VarName!> = aDecoder.decodeObject(forKey: \"<!JsonKeyName!>\") as? <!VarType!>\n",
                       "returnStatement": "",
                       "body": "",
                       "comment": "\n    /**\n    * NSCoding required initializer.\n    * Fills the data from the passed decoder\n    */\n",
                       "bodyStart": "\n\t{\n"
                       },
                       {
                       "forEachProperty": "\t\tif <!VarName!> != nil{\n\t\t\taCoder.encode(<!VarName!>, forKey: \"<!JsonKeyName!>\")\n\t\t}\n",
                       "bodyEnd": "\n\t}\n",
                       "signature": "    func encode(with aCoder: NSCoder)",
                       "forEachCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\taCoder.encode(<!VarName!>, forKey: \"<!JsonKeyName!>\")\n\t\t}\n",
                       "forEachArrayOfCustomTypeProperty": "\t\tif <!VarName!> != nil{\n\t\t\taCoder.encode(<!VarName!>, forKey: \"<!JsonKeyName!>\")\n\t\t}\n",
                       "returnStatement": "",
                       "body": "",
                       "comment": "\n    /**\n    * NSCoding required method.\n    * Encodes mode properties into the decoder\n    */\n",
                       "bodyStart": "\n\t{\n"
                       }
                       ],
    "dataTypes": {
        "stringType": "String",
        "boolType": "Bool",
        "floatType": "Float",
        "doubleType": "Double",
        "characterType": "Character",
        "longType": "Double",
        "intType": "Int"
    },
    "wordsToRemoveToGetArrayElementsType": [
                                            "[",
                                            "]"
                                            ],
    "defaultParentWithUtilityMethods": "NSObject, NSCoding",
    "constructors": [
                     {
                     "fetchArrayOfBasicTypePropertyFromMap": "\t\t<!VarName!> = <!VarType!>()\n\t\tlet <!VarName!>Array = json[\"<!JsonKeyName!>\"].arrayValue\n\t\tfor <!VarName!>Json in <!VarName!>Array{\n\t\t\t<!VarName!>.append(<!VarName!>Json.<!VarBasicTypeReplacement!>)\n\t\t}\n",
                     "fetchBasicTypeWithSpecialNeedsPropertyFromMap": "\t\t<!VarName!> = json[\"<!JsonKeyName!>\"].<!VarBasicTypeReplacement!>\n",
                     "bodyStart": "{\n\t\tif json.isEmpty{\n\t\t\treturn\n\t\t}\n",
                     "bodyEnd": "\t}\n",
                     "fetchBasicTypePropertyFromMap": "",
                     "signature": "\tinit(fromJson json: JSON!)",
                     "fetchArrayOfCustomTypePropertyFromMap": "\t\t<!VarName!> = <!VarType!>()\n\t\tlet <!VarName!>Array = json[\"<!JsonKeyName!>\"].arrayValue\n\t\tfor <!VarName!>Json in <!VarName!>Array{\n\t\t\tlet value = <!ElementType!>(fromJson: <!VarName!>Json)\n\t\t\t<!VarName!>.append(value)\n\t\t}\n",
                     "comment": "\t/**\n\t * Instantiate the instance using the passed json values to set the properties values\n\t */\n",
                     "fetchCustomTypePropertyFromMap": "\t\tlet <!VarName!>Json = json[\"<!JsonKeyName!>\"]\n\t\tif !<!VarName!>Json.isEmpty{\n\t\t\t<!VarName!> = <!VarType!>(fromJson: <!VarName!>Json)\n\t\t}\n"
                     }
                     ],
    "modelDefinition": "\nclass <!ModelName!>",
    "genericType": "AnyObject",
    "getter": "",
    "setter": "",
    "displayLangName": "SwiftyJSON - Class",
    "fileExtension": "swift",
    "basicTypesWithSpecialFetchingNeeds": [
                                           "Int",
                                           "Bool",
                                           "Character",
                                           "Float",
                                           "Double",
                                           "String",
                                           "AnyObject"
                                           ],
    "arrayType": "[<!ElementType!>]",
    "modelDefinitionWithParent": "\n\nclass <!ModelName!> : <!ParentClass!>",
    "instanceVarDefinition": "\tvar <!VarName!> : <!VarType!>!\n",
    "supportsFirstLineStatement": "false",
    "modelEnd": "\n}",
    "staticImports": "import Foundation \nimport SwiftyJSON",
    "langName": "Swift"
}
